services:
  db:
    image: postgres:17-alpine
    container_name: wifi_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-wifi}
      POSTGRES_USER: ${POSTGRES_USER:-wifi}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-wifi}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-wifi} -d ${POSTGRES_DB:-wifi}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: wifi_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: wifi_backend
    env_file:
      - ./backend/.env
    environment:
      DATABASE_URL: ""
      DB_HOST: db
      DB_PORT: "5432"
      DB_NAME: ${POSTGRES_DB:-wifi}
      DB_USER: ${POSTGRES_USER:-wifi}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-wifi}
      DB_SSL_REQUIRED: "false"
      REDIS_URL: redis://redis:6379/0
      FRONTEND_URL: http://localhost:3000
      ALLOWED_HOSTS: localhost,127.0.0.1,backend
      DEBUG: "true"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/app
    command: >
      bash -lc "
      python manage.py migrate --noinput &&
      python manage.py runserver 0.0.0.0:8000
      "
    ports:
      - "8000:8000"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: wifi_frontend
    env_file:
      - ./frontend/.env
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    command: >
      sh -lc "
      [ -d node_modules ] || npm ci;
      npm run dev -- --hostname 0.0.0.0 --port 3000
      "

volumes:
  pg_data:
  redis_data:
